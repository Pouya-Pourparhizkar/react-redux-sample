{"version":3,"sources":["core/store/core.types.ts","core/store/core.actions.ts","core/models/theme.ts","core/store/core.reducer.ts","core/api/core.api.ts","core/store/core.saga.ts","core/core.module.ts","core/themes/material-ui.tsx","core/app.tsx","server/seeds/seed.ts","server/seeds/hero-seed.ts","server/seeds/power-seed.ts","server/seeds/theme-seed.ts","serviceWorker.ts","server/index.ts","index.tsx","core/configure-store.ts","assets/github.svg"],"names":["CoreActionTypes","Theme","loadThemeSuccess","theme","type","CoreTypes","LOAD_THEME_SUCCESS","payload","setThemeSuccess","SET_THEME_SUCCESS","initialState","Light","loadingTheme","reducer","state","action","LOAD_THEME","CoreApi","axios","get","response","data","post","loadTheme","setTheme","watchRequests","coreSaga","call","getTheme","put","actions","takeLatest","SET_THEME","all","fork","CoreModule","id","reducerMap","core","coreReducer","sagas","initialActions","finalActions","lightTheme","createMuiTheme","palette","primary","light","main","secondary","overrides","MuiFilledInput","root","borderBottomLeftRadius","borderBottomRightRadius","underline","borderColor","typography","button","textTransform","fontFamily","join","darkTheme","Dark","props","color","MuiFormLabel","MuiLink","availableThemes","Map","Hero","React","lazy","Home","mapDispatchToProps","connector","connect","useState","muiTheme","setMuiTheme","smAndDown","useMediaQuery","breakpoints","down","themesMap","useEffect","modules","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Box","flexGrow","clone","Typography","variant","noWrap","IconButton","onClick","Icon","href","src","GitHub","alt","Container","className","maxWidth","disableGutters","basename","fallback","path","component","Seed","inflector","model","json","localStorage","getItem","this","collectionName","JSON","parse","schema","setItem","stringify","models","singular","HeroSeed","initialSeed","name","powerId","quote","plural","Model","extend","server","getFromStorage","forEach","hero","create","delete","request","params","find","destroy","setToStorage","attrs","requestBody","update","PowerSeed","power","ThemeSeed","selected","findBy","document","Boolean","window","location","hostname","match","seeds","inflections","inflect","seed","irregular","createServer","reduce","Object","assign","routes","startServer","store","createStore","extensions","getSagaExtension","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.71e06b65.chunk.js","sourcesContent":["import { Theme } from '../models';\r\n\r\nexport enum CoreActionTypes {\r\n  LOAD_THEME = '[Theme] Load theme',\r\n  LOAD_THEME_SUCCESS = '[Theme] Loaded theme successfuly',\r\n  SET_THEME = '[Theme] Set theme',\r\n  SET_THEME_SUCCESS = '[Theme] Set theme successfuly',\r\n}\r\n\r\nexport interface LoadTheme {\r\n  type: typeof CoreActionTypes.LOAD_THEME;\r\n}\r\n\r\nexport interface LoadThemeSuccess {\r\n  type: typeof CoreActionTypes.LOAD_THEME_SUCCESS;\r\n  payload: Theme;\r\n}\r\n\r\nexport interface SetTheme {\r\n  type: typeof CoreActionTypes.SET_THEME;\r\n  payload: Theme;\r\n}\r\n\r\nexport interface SetThemeSuccess {\r\n  type: typeof CoreActionTypes.SET_THEME_SUCCESS;\r\n  payload: Theme;\r\n}\r\n\r\nexport type CoreActions\r\n  = LoadTheme\r\n  | LoadThemeSuccess\r\n  | SetTheme\r\n  | SetThemeSuccess;\r\n","import { Theme } from '../models';\r\nimport * as CoreTypes from './core.types';\r\n\r\nexport const loadTheme = (): CoreTypes.LoadTheme => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.LOAD_THEME,\r\n  };\r\n};\r\n\r\nexport const loadThemeSuccess = (theme: Theme): CoreTypes.LoadThemeSuccess => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.LOAD_THEME_SUCCESS,\r\n    payload: theme,\r\n  };\r\n};\r\n\r\nexport const setTheme = (theme: Theme): CoreTypes.SetTheme => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.SET_THEME,\r\n    payload: theme,\r\n  };\r\n};\r\n\r\nexport const setThemeSuccess = (theme: Theme): CoreTypes.SetThemeSuccess => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.SET_THEME_SUCCESS,\r\n    payload: theme,\r\n  };\r\n};\r\n","export enum Theme {\r\n  Light = 'light',\r\n  Dark = 'dark',\r\n}\r\n","import { Theme } from '../models';\r\nimport { CoreActions, CoreActionTypes } from './core.types';\r\n\r\nexport interface CoreState {\r\n  theme: Theme;\r\n  loadingTheme: boolean;\r\n}\r\n\r\nconst initialState: CoreState = {\r\n  theme: Theme.Light,\r\n  loadingTheme: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action: CoreActions): CoreState => {\r\n  switch (action.type) {\r\n    case CoreActionTypes.LOAD_THEME:\r\n      return {\r\n        ...state,\r\n        loadingTheme: true,\r\n      };\r\n    case CoreActionTypes.LOAD_THEME_SUCCESS:\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n        loadingTheme: false,\r\n      };\r\n    case CoreActionTypes.SET_THEME_SUCCESS:\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import axios from 'axios';\r\n\r\nimport { Theme } from '../models';\r\n\r\nexport class CoreApi {\r\n\r\n  static async getTheme(): Promise<Theme> {\r\n    const response = await axios.get<{ theme: Theme}>('/api/theme');\r\n    return response.data.theme;\r\n  }\r\n\r\n  static async setTheme(theme: Theme): Promise<void> {\r\n    await axios.post<void>('/api/theme', theme);\r\n  }\r\n}\r\n","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { CoreApi } from '../api';\r\nimport * as actions from './core.actions';\r\nimport { CoreActionTypes } from './core.types';\r\n\r\nfunction* loadTheme() {\r\n  const theme = yield call(CoreApi.getTheme);\r\n  yield put(actions.loadThemeSuccess(theme));\r\n}\r\n\r\nfunction* setTheme(action: ReturnType<typeof actions.setTheme>) {\r\n  yield call(() => CoreApi.setTheme(action.payload));\r\n  yield put(actions.setThemeSuccess(action.payload));\r\n}\r\n\r\nfunction* watchRequests() {\r\n  yield takeLatest(CoreActionTypes.LOAD_THEME, loadTheme);\r\n  yield takeLatest(CoreActionTypes.SET_THEME, setTheme);\r\n}\r\n\r\nfunction* coreSaga() {\r\n  yield all([fork(watchRequests)]);\r\n}\r\n\r\nexport default coreSaga;\r\n","import { ISagaModule } from 'redux-dynamic-modules-saga';\r\n\r\nimport { loadTheme } from './store/core.actions';\r\nimport coreReducer, { CoreState } from './store/core.reducer';\r\nimport coreSaga from './store/core.saga';\r\n\r\nexport interface CoreAwareState {\r\n  core: CoreState;\r\n}\r\n\r\nexport const CoreModule: ISagaModule<CoreAwareState> = {\r\n  id: 'core',\r\n  reducerMap: { core: coreReducer },\r\n  sagas: [coreSaga],\r\n  initialActions: [\r\n    loadTheme(),\r\n  ],\r\n  finalActions: [],\r\n};\r\n","import { Theme as MuiTheme } from '@material-ui/core';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { Theme } from '../models';\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: Theme.Light,\r\n    primary: {\r\n      light: '#e1ecff',\r\n      main: '#1d8ef1',\r\n    },\r\n    secondary: {\r\n      main: '#42a6f5',\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiFilledInput: {\r\n      root: {\r\n        borderBottomLeftRadius: '4px',\r\n        borderBottomRightRadius: '4px',\r\n      },\r\n      underline: {\r\n        '&::before': {\r\n          borderColor: 'transparent',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  typography: {\r\n    button: {\r\n      textTransform: 'none',\r\n    },\r\n    fontFamily: [\r\n      'Varela Round',\r\n      'Roboto',\r\n      'sans-serif',\r\n    ].join(','),\r\n  },\r\n});\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: Theme.Dark,\r\n    primary: {\r\n      light: '#18ffff',\r\n      main: '#212121',\r\n    },\r\n    secondary: {\r\n      main: '#26c6da',\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiFilledInput: {\r\n      root: {\r\n        borderBottomLeftRadius: '4px',\r\n        borderBottomRightRadius: '4px',\r\n      },\r\n      underline: {\r\n        '&::before': {\r\n          borderColor: 'transparent',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  props: {\r\n    MuiFilledInput: {\r\n      color: 'secondary',\r\n    },\r\n    MuiFormLabel: {\r\n      color: 'secondary',\r\n    },\r\n    MuiLink: {\r\n      color: 'secondary',\r\n    },\r\n  },\r\n  typography: {\r\n    button: {\r\n      textTransform: 'none',\r\n    },\r\n    fontFamily: [\r\n      'Varela Round',\r\n      'Roboto',\r\n      'sans-serif',\r\n    ].join(','),\r\n  },\r\n});\r\n\r\nexport const availableThemes: Map<Theme, MuiTheme> = new Map([\r\n  [Theme.Light, lightTheme],\r\n  [Theme.Dark, darkTheme],\r\n]);\r\n","import { Box, Container, CssBaseline, Icon, IconButton, Theme as MuiTheme, ThemeProvider, useMediaQuery } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport React, { Suspense, useEffect, useState } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { DynamicModuleLoader } from 'redux-dynamic-modules';\r\n\r\nimport { CoreAwareState, CoreModule } from './core.module';\r\nimport { Theme } from './models';\r\nimport * as actions from './store/core.actions';\r\nimport { availableThemes } from './themes';\r\n\r\nimport GitHub from '../assets/github.svg';\r\nimport './app.scss';\r\n\r\nconst Hero = React.lazy(() => import('../hero'));\r\nconst Home = React.lazy(() => import('../home'));\r\n\r\nconst mapStateToProps = ({ core }: CoreAwareState) => {\r\n  return {\r\n    theme: core?.theme,\r\n    loadingTheme: core?.loadingTheme,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setTheme: actions.setTheme,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype Props = ConnectedProps<typeof connector>;\r\n\r\nconst App: React.FunctionComponent<Props> = (props) => {\r\n  const {\r\n    theme,\r\n    loadingTheme,\r\n    setTheme,\r\n  } = props;\r\n\r\n  const [muiTheme, setMuiTheme] = useState<MuiTheme>();\r\n\r\n  const smAndDown = useMediaQuery(muiTheme?.breakpoints.down('sm') || '');\r\n\r\n  const themesMap = availableThemes;\r\n\r\n  useEffect(() => {\r\n    if (loadingTheme === false) {\r\n      setMuiTheme(themesMap.get(theme));\r\n    }\r\n  }, [loadingTheme, theme, themesMap]);\r\n\r\n  return (\r\n    <DynamicModuleLoader modules={[CoreModule]}>\r\n      {muiTheme && (\r\n        <ThemeProvider theme={muiTheme}>\r\n          <CssBaseline />\r\n          <AppBar position=\"sticky\">\r\n            <Toolbar>\r\n              <Box flexGrow={1} clone={true}>\r\n                <Typography variant=\"h6\" noWrap={true}>\r\n                  react-redux\r\n                </Typography>\r\n              </Box>\r\n              {theme === Theme.Light && (\r\n                <IconButton color=\"inherit\" onClick={() => setTheme(Theme.Dark)}>\r\n                  <Icon>brightness_4</Icon>\r\n                </IconButton>\r\n              )}\r\n              {theme === Theme.Dark && (\r\n                <IconButton color=\"inherit\" onClick={() => setTheme(Theme.Light)}>\r\n                  <Icon>brightness_7</Icon>\r\n                </IconButton>\r\n              )}\r\n              <IconButton color=\"inherit\" href=\"https://github.com/jfcere/react-redux-sample\">\r\n                <img src={GitHub} alt=\"GitHub\" />\r\n              </IconButton>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Container className=\"app-container\" maxWidth=\"lg\" disableGutters={smAndDown}>\r\n            <BrowserRouter basename=\"/react-redux-sample\">\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <Switch>\r\n                  <Route path=\"/heroes\" component={Hero}/>\r\n                  <Route path=\"/\" component={Home}/>\r\n                </Switch>\r\n              </Suspense>\r\n            </BrowserRouter>\r\n          </Container>\r\n        </ThemeProvider>\r\n      )}\r\n    </DynamicModuleLoader>\r\n  );\r\n};\r\n\r\nexport default connector(App);\r\n","import { Server } from 'miragejs';\r\nimport { AnyRegistry, ModelDefinition } from 'miragejs/-types';\r\nimport Schema from 'miragejs/orm/schema';\r\n\r\nexport abstract class Seed {\r\n\r\n  abstract inflector: { singular: string, plural: string };\r\n  abstract model: Record<string, ModelDefinition<any>>;\r\n  abstract seeds(server: Server): void;\r\n  abstract routes(server: Server): void;\r\n\r\n  get collectionName() {\r\n    return this.inflector.singular;\r\n  }\r\n\r\n  getFromStorage<T>(): T | null {\r\n    const json = localStorage.getItem(this.collectionName);\r\n    return json ? JSON.parse(json) : null;\r\n  }\r\n\r\n  setToStorage(schema: Schema<AnyRegistry>) {\r\n    localStorage.setItem(this.collectionName, JSON.stringify(schema.all(this.collectionName).models));\r\n  }\r\n}\r\n\r\n","import { Model, Server } from 'miragejs';\r\n\r\nimport { Hero } from '../../hero/models';\r\nimport { Seed } from './seed';\r\n\r\nexport class HeroSeed extends Seed {\r\n\r\n  private readonly initialSeed: Hero[] = [\r\n    { id: 1, name: 'Captain America', powerId: 5, quote: `You can't justify murder by masking it with a cause.` },\r\n    { id: 2, name: 'Cat Woman', powerId: 14, quote: `Like the view? It's the only thing you'll be catching tonight.` },\r\n    { id: 3, name: 'Flash', powerId: 12, quote: `Life doesn't give us purpose. We give life purpose.` },\r\n    { id: 4, name: 'Spiderman', powerId: 9, quote: `With great power comes great responsability.` },\r\n    { id: 5, name: 'Robin', powerId: 4, quote: `Holy funny bone.` },\r\n  ];\r\n\r\n  inflector = {\r\n    singular: 'hero',\r\n    plural: 'heroes',\r\n  };\r\n\r\n  model = {\r\n    [this.collectionName]: Model.extend<Partial<Hero>>({}),\r\n  };\r\n\r\n  seeds(server: Server): void {\r\n    const heroes = this.getFromStorage<Hero[]>() || this.initialSeed;\r\n    heroes.forEach(hero => server.create(this.collectionName, hero as object));\r\n  }\r\n\r\n  routes(server: Server): void {\r\n    server.get('/api/heroes', (schema) => {\r\n      return schema.all(this.collectionName).models;\r\n    });\r\n\r\n    server.delete('/api/heroes/:id', (schema, request) => {\r\n      const id = request.params.id;\r\n      const hero = schema.find(this.collectionName, id);\r\n      hero?.destroy();\r\n      this.setToStorage(schema);\r\n      return hero?.attrs || {};\r\n    });\r\n\r\n    server.post('/api/heroes', (schema, request) => {\r\n      const attrs = JSON.parse(request.requestBody);\r\n      const id = schema.create(this.collectionName, { ...attrs, id: null }).id;\r\n      this.setToStorage(schema);\r\n      return schema.find(this.collectionName, id)?.attrs || {};\r\n    });\r\n\r\n    server.put('/api/heroes/:id', (schema, request) => {\r\n      const id = request.params.id;\r\n      const attrs = JSON.parse(request.requestBody) as Hero;\r\n      const hero = schema.find(this.collectionName, id);\r\n      hero?.update(attrs);\r\n      this.setToStorage(schema);\r\n      return hero?.attrs || {};\r\n    });\r\n  }\r\n}\r\n","import { Model, Server } from 'miragejs';\r\n\r\nimport { Power } from '../../hero/models';\r\nimport { Seed } from './seed';\r\n\r\nexport class PowerSeed extends Seed {\r\n\r\n  private readonly initialSeed: Power[] = [\r\n    { id: 1, name: 'Intangibility' },\r\n    { id: 2, name: 'Force Field' },\r\n    { id: 3, name: 'Mind Control' },\r\n    { id: 4, name: 'Superhuman Intelligence' },\r\n    { id: 5, name: 'Superhuman Agility' },\r\n    { id: 6, name: 'Time Manipulation' },\r\n    { id: 7, name: 'Teleportation' },\r\n    { id: 8, name: 'Precognition' },\r\n    { id: 9, name: 'Wall Crawling' },\r\n    { id: 10, name: 'Atmokinesis' },\r\n    { id: 11, name: 'Omnilinguilism' },\r\n    { id: 12, name: 'Superhuman Speed' },\r\n    { id: 13, name: 'Telepathy' },\r\n    { id: 14, name: 'Night Vision' },\r\n    { id: 15, name: 'Time Travel' },\r\n    { id: 16, name: 'Invulnerability' },\r\n    { id: 17, name: 'Water Breathing' },\r\n    { id: 18, name: 'Superhuman Endurance' },\r\n    { id: 19, name: 'Healing' },\r\n    { id: 20, name: 'Superhuman Strength' },\r\n    { id: 21, name: 'Invincibility' },\r\n    { id: 22, name: 'Flying' },\r\n  ];\r\n\r\n  inflector = {\r\n    singular: 'power',\r\n    plural: 'powers',\r\n  };\r\n\r\n  model = {\r\n    [this.collectionName]: Model.extend<Partial<Power>>({}),\r\n  };\r\n\r\n  seeds(server: Server): void {\r\n    this.initialSeed.forEach(power => server.create(this.collectionName, power as object));\r\n  }\r\n\r\n  routes(server: Server): void {\r\n    server.get('/api/powers', (schema) => {\r\n      return schema.all(this.collectionName).models;\r\n    });\r\n  }\r\n}\r\n","import { Model, Server } from 'miragejs';\r\n\r\nimport { Theme } from '../../core/models';\r\nimport { Seed } from './seed';\r\n\r\ninterface ThemeDto {\r\n  id: number;\r\n  theme: string;\r\n  selected: boolean;\r\n}\r\n\r\nexport class ThemeSeed extends Seed {\r\n\r\n  private readonly initialSeed: ThemeDto[] = [\r\n    { id: 1, theme: Theme.Light, selected: true },\r\n    { id: 2, theme: Theme.Dark, selected: false },\r\n  ];\r\n\r\n  inflector = {\r\n    singular: 'theme',\r\n    plural: 'themes',\r\n  };\r\n\r\n  model = {\r\n    [this.collectionName]: Model.extend<Partial<ThemeDto>>({}),\r\n  };\r\n\r\n  seeds(server: Server): void {\r\n    const themes = this.getFromStorage<ThemeDto[]>() || this.initialSeed;\r\n    themes.forEach(theme => server.create(this.collectionName, theme as object));\r\n  }\r\n\r\n  routes(server: Server): void {\r\n    server.get('/api/theme', (schema) => {\r\n      return schema.findBy(this.collectionName, { selected: true } as object)?.attrs || {};\r\n    });\r\n\r\n    server.post('/api/theme', (schema, request) => {\r\n      const theme = request.requestBody;\r\n      // update selected property\r\n      const documents = schema.all(this.collectionName).models;\r\n      documents.forEach(document => document.update({ selected: document.attrs.theme === theme }));\r\n      // store collection\r\n      this.setToStorage(schema);\r\n      // return selected theme\r\n      return schema.findBy(this.collectionName, { selected: true } as object)?.attrs || {};\r\n    });\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { inflections } from 'inflected';\r\nimport { createServer } from 'miragejs';\r\n\r\nimport { HeroSeed, PowerSeed, Seed, ThemeSeed } from './seeds';\r\n\r\nexport function startServer() {\r\n\r\n  const seeds: Seed[] = [\r\n    new HeroSeed(),\r\n    new PowerSeed(),\r\n    new ThemeSeed(),\r\n  ];\r\n\r\n  inflections('en', inflect => {\r\n    seeds.forEach(seed => inflect.irregular(seed.inflector.singular, seed.inflector.plural));\r\n  });\r\n\r\n  return createServer({\r\n    models: seeds.reduce((models, seed) => Object.assign(models, seed.model), {}),\r\n\r\n    seeds(server) {\r\n      seeds.forEach(seed => seed.seeds(server));\r\n    },\r\n\r\n    routes() {\r\n      seeds.forEach(seed => seed.routes(this));\r\n    },\r\n  });\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './core';\nimport { configureStore } from './core/configure-store';\nimport './index.scss';\nimport { startServer } from './server';\nimport * as serviceWorker from './serviceWorker';\n\nstartServer();\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, IModuleStore } from 'redux-dynamic-modules';\r\nimport { getSagaExtension } from 'redux-dynamic-modules-saga';\r\n\r\nexport function configureStore(): IModuleStore<any> {\r\n  return createStore({\r\n    extensions: [getSagaExtension()],\r\n  });\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/github.69494fdd.svg\";"],"sourceRoot":""}