{"version":3,"sources":["core/store/core.types.ts","core/themes/material-ui.tsx","core/store/core.reducer.ts","core/api/core.api.ts","core/store/core.actions.ts","core/store/core.saga.ts","core/core.module.ts","core/app.tsx","serviceWorker.ts","server/index.ts","index.tsx","core/configure-store.ts","assets/github.svg"],"names":["CoreActionTypes","lightTheme","createMuiTheme","palette","type","primary","light","main","secondary","typography","button","textTransform","fontFamily","join","darkTheme","initialState","theme","reducer","state","action","LOAD_THEME_SUCCESS","SET_THEME","payload","CoreApi","Promise","resolve","loadThemeSuccess","CoreTypes","loadTheme","watchRequests","coreSaga","call","getTheme","response","put","actions","takeLatest","LOAD_THEME","all","fork","CoreModule","id","reducerMap","core","coreReducer","sagas","initialActions","finalActions","Hero","React","lazy","Home","mapDispatchToProps","setTheme","connector","connect","props","smAndDown","useMediaQuery","breakpoints","down","useEffect","modules","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Box","flexGrow","clone","Typography","variant","noWrap","IconButton","color","onClick","Icon","href","src","GitHub","alt","Container","className","maxWidth","disableGutters","fallback","path","component","Boolean","window","location","hostname","match","inflections","inflect","irregular","createServer","models","Model","extend","seeds","server","create","name","powerId","quote","routes","this","get","schema","delete","request","params","hero","find","destroy","attrs","post","JSON","parse","requestBody","update","makeServer","store","createStore","extensions","getSagaExtension","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.23bc7bc5.chunk.js","sourcesContent":["import { Theme } from '@material-ui/core';\r\n\r\nexport enum CoreActionTypes {\r\n  LOAD_THEME = '[Theme] Load theme',\r\n  LOAD_THEME_SUCCESS = '[Theme] Loaded theme successfuly',\r\n  SET_THEME = '[Theme] Set theme',\r\n}\r\n\r\nexport interface LoadTheme {\r\n  type: typeof CoreActionTypes.LOAD_THEME;\r\n}\r\n\r\nexport interface LoadThemeSuccess {\r\n  type: typeof CoreActionTypes.LOAD_THEME_SUCCESS;\r\n  payload: Theme;\r\n}\r\n\r\nexport interface SetTheme {\r\n  type: typeof CoreActionTypes.SET_THEME;\r\n  payload: Theme;\r\n}\r\n\r\nexport type CoreActions\r\n  = LoadTheme\r\n  | LoadThemeSuccess\r\n  | SetTheme;\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    primary: {\r\n      light: '#e1ecff',\r\n      main: '#1d8ef1',\r\n    },\r\n    secondary: {\r\n      main: '#42a6f5',\r\n    },\r\n  },\r\n  typography: {\r\n    button: {\r\n      textTransform: 'none',\r\n    },\r\n    fontFamily: [\r\n      'Varela Round',\r\n      'Roboto',\r\n      'sans-serif',\r\n    ].join(','),\r\n  },\r\n});\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      light: '#18ffff',\r\n      main: '#212121',\r\n    },\r\n    secondary: {\r\n      main: '#26c6da',\r\n    },\r\n  },\r\n  typography: {\r\n    button: {\r\n      textTransform: 'none',\r\n    },\r\n    fontFamily: [\r\n      'Varela Round',\r\n      'Roboto',\r\n      'sans-serif',\r\n    ].join(','),\r\n  },\r\n});\r\n","import { Theme } from '@material-ui/core';\r\n\r\nimport { lightTheme } from '../themes/material-ui';\r\nimport { CoreActions, CoreActionTypes } from './core.types';\r\n\r\nexport interface CoreState {\r\n  theme: Theme;\r\n}\r\n\r\nconst initialState: CoreState = {\r\n  theme: lightTheme,\r\n};\r\n\r\nconst reducer = (state = initialState, action: CoreActions): CoreState => {\r\n  switch (action.type) {\r\n    case CoreActionTypes.LOAD_THEME_SUCCESS:\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n      };\r\n    case CoreActionTypes.SET_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Theme } from '@material-ui/core';\r\n\r\nimport { lightTheme } from '../themes';\r\n\r\nexport class CoreApi {\r\n\r\n  static getTheme(): Promise<Theme> {\r\n    return Promise.resolve(lightTheme);\r\n  }\r\n}\r\n","import { Theme } from '@material-ui/core';\r\n\r\nimport * as CoreTypes from './core.types';\r\n\r\nexport const loadTheme = (): CoreTypes.LoadTheme => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.LOAD_THEME,\r\n  };\r\n};\r\n\r\nexport const loadThemeSuccess = (theme: Theme): CoreTypes.LoadThemeSuccess => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.LOAD_THEME_SUCCESS,\r\n    payload: theme,\r\n  };\r\n};\r\n\r\nexport const setTheme = (theme: Theme): CoreTypes.SetTheme => {\r\n  return {\r\n    type: CoreTypes.CoreActionTypes.SET_THEME,\r\n    payload: theme,\r\n  };\r\n};\r\n","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { CoreApi } from '../api';\r\nimport * as actions from './core.actions';\r\nimport { CoreActionTypes } from './core.types';\r\n\r\nfunction* loadTheme() {\r\n  const response = yield call(CoreApi.getTheme);\r\n  yield put(actions.loadThemeSuccess(response));\r\n}\r\n\r\nfunction* watchRequests() {\r\n  yield takeLatest(CoreActionTypes.LOAD_THEME, loadTheme);\r\n}\r\n\r\nfunction* coreSaga() {\r\n  yield all([fork(watchRequests)]);\r\n}\r\n\r\nexport default coreSaga;\r\n","import { ISagaModule } from 'redux-dynamic-modules-saga';\r\n\r\nimport coreReducer, { CoreState } from './store/core.reducer';\r\nimport coreSaga from './store/core.saga';\r\n\r\nexport interface CoreAwareState {\r\n  core: CoreState;\r\n}\r\n\r\nexport const CoreModule: ISagaModule<CoreAwareState> = {\r\n  id: 'core',\r\n  reducerMap: { core: coreReducer },\r\n  sagas: [coreSaga],\r\n  initialActions: [],\r\n  finalActions: [],\r\n};\r\n","import { Box, Container, CssBaseline, Icon, IconButton, ThemeProvider, useMediaQuery } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport React, { Suspense, useEffect } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { DynamicModuleLoader } from 'redux-dynamic-modules';\r\n\r\nimport { CoreAwareState, CoreModule } from './core.module';\r\nimport * as actions from './store/core.actions';\r\nimport { darkTheme, lightTheme } from './themes';\r\n\r\nimport GitHub from '../assets/github.svg';\r\nimport './app.scss';\r\n\r\nconst Hero = React.lazy(() => import('../hero'));\r\nconst Home = React.lazy(() => import('../home'));\r\n\r\nconst mapStateToProps = ({ core }: CoreAwareState) => {\r\n  return {\r\n    theme: core?.theme,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  loadTheme: actions.loadTheme,\r\n  setTheme: actions.setTheme,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype Props = ConnectedProps<typeof connector>;\r\n\r\nconst App: React.FunctionComponent<Props> = (props) => {\r\n  const {\r\n    theme,\r\n    loadTheme,\r\n    setTheme,\r\n  } = props;\r\n\r\n  const smAndDown = useMediaQuery(theme?.breakpoints.down('sm') || '');\r\n\r\n  useEffect(() => {\r\n    loadTheme();\r\n  }, [loadTheme]);\r\n\r\n  return (\r\n    <DynamicModuleLoader modules={[CoreModule]}>\r\n      {theme && (\r\n        <ThemeProvider theme={theme}>\r\n          <CssBaseline />\r\n          <AppBar position=\"relative\">\r\n            <Toolbar>\r\n              <Box flexGrow={1} clone={true}>\r\n                <Typography variant=\"h6\" noWrap={true}>\r\n                  react-redux\r\n                </Typography>\r\n              </Box>\r\n              {theme === lightTheme && (\r\n                <IconButton color=\"inherit\" onClick={() => setTheme(darkTheme)}>\r\n                  <Icon>brightness_4</Icon>\r\n                </IconButton>\r\n              )}\r\n              {theme === darkTheme && (\r\n                <IconButton color=\"inherit\" onClick={() => setTheme(lightTheme)}>\r\n                  <Icon>brightness_7</Icon>\r\n                </IconButton>\r\n              )}\r\n              <IconButton color=\"inherit\" href=\"https://github.com/jfcere/react-redux-sample\">\r\n                <img src={GitHub} alt=\"GitHub\" />\r\n              </IconButton>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Container className=\"app-container\" maxWidth=\"lg\" disableGutters={smAndDown}>\r\n            <BrowserRouter>\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <Switch>\r\n                  <Route path=\"/heroes\" component={Hero}/>\r\n                  <Route path=\"/\" component={Home}/>\r\n                </Switch>\r\n              </Suspense>\r\n            </BrowserRouter>\r\n          </Container>\r\n        </ThemeProvider>\r\n      )}\r\n    </DynamicModuleLoader>\r\n  );\r\n};\r\n\r\nexport default connector(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { inflections } from 'inflected';\r\nimport { createServer, Model } from 'miragejs';\r\nimport { Hero, Power } from '../hero/models';\r\n\r\n// tslint:disable: max-line-length\r\nexport function makeServer() {\r\n  const heroCollection = 'hero';\r\n  const powerCollection = 'power';\r\n\r\n  inflections('en', inflect => {\r\n    inflect.irregular('hero', 'heroes');\r\n    inflect.irregular('power', 'powers');\r\n  });\r\n\r\n  return createServer({\r\n    models: {\r\n      [heroCollection]: Model.extend<Partial<Hero>>({}),\r\n      [powerCollection]: Model.extend<Partial<Power>>({}),\r\n    },\r\n\r\n    seeds(server) {\r\n      // hero\r\n      server.create(heroCollection, { id: 1, name: 'Captain America', powerId: 5, quote: `You can't justify murder by masking it with a cause.` } as object);\r\n      server.create(heroCollection, { id: 2, name: 'Cat Woman', powerId: 14, quote: `Like the view? It's the only thing you'll be catching tonight.` } as object);\r\n      server.create(heroCollection, { id: 3, name: 'Flash', powerId: 12, quote: `Life doesn't give us purpose. We give life purpose.` } as object);\r\n      server.create(heroCollection, { id: 4, name: 'Spiderman', powerId: 9, quote: `With great power comes great responsability.` } as object);\r\n      server.create(heroCollection, { id: 5, name: 'Robin', powerId: 4, quote: `Holy funny bone.` } as object);\r\n\r\n      // power\r\n      server.create(powerCollection, { id: 1, name: 'Intangibility' } as object);\r\n      server.create(powerCollection, { id: 2, name: 'Force Field' } as object);\r\n      server.create(powerCollection, { id: 3, name: 'Mind Control' } as object);\r\n      server.create(powerCollection, { id: 4, name: 'Superhuman Intelligence' } as object);\r\n      server.create(powerCollection, { id: 5, name: 'Superhuman Agility' } as object);\r\n      server.create(powerCollection, { id: 6, name: 'Time Manipulation' } as object);\r\n      server.create(powerCollection, { id: 7, name: 'Teleportation' } as object);\r\n      server.create(powerCollection, { id: 8, name: 'Precognition' } as object);\r\n      server.create(powerCollection, { id: 9, name: 'Wall Crawling' } as object);\r\n      server.create(powerCollection, { id: 10, name: 'Atmokinesis' } as object);\r\n      server.create(powerCollection, { id: 11, name: 'Omnilinguilism' } as object);\r\n      server.create(powerCollection, { id: 12, name: 'Superhuman Speed' } as object);\r\n      server.create(powerCollection, { id: 13, name: 'Telepathy' } as object);\r\n      server.create(powerCollection, { id: 14, name: 'Night Vision' } as object);\r\n      server.create(powerCollection, { id: 15, name: 'Time Travel' } as object);\r\n      server.create(powerCollection, { id: 16, name: 'Invulnerability' } as object);\r\n      server.create(powerCollection, { id: 17, name: 'Water Breathing' } as object);\r\n      server.create(powerCollection, { id: 18, name: 'Superhuman Endurance' } as object);\r\n      server.create(powerCollection, { id: 19, name: 'Healing' } as object);\r\n      server.create(powerCollection, { id: 20, name: 'Superhuman Strength' } as object);\r\n      server.create(powerCollection, { id: 21, name: 'Invincibility' } as object);\r\n      server.create(powerCollection, { id: 22, name: 'Flying' } as object);\r\n    },\r\n\r\n    routes() {\r\n      // heroes\r\n      this.get('/api/heroes', (schema) => {\r\n        return schema.all(heroCollection).models;\r\n      });\r\n\r\n      this.delete('/api/heroes/:id', (schema, request) => {\r\n        const id = request.params.id;\r\n        const hero = schema.find(heroCollection, id);\r\n        hero?.destroy();\r\n        return hero?.attrs || {};\r\n      });\r\n\r\n      this.post('/api/heroes', (schema, request) => {\r\n        const attrs = JSON.parse(request.requestBody);\r\n        attrs.id = null;\r\n        const id = schema.create(heroCollection, attrs).id;\r\n        return schema.find(heroCollection, id)?.attrs || {};\r\n      });\r\n\r\n      this.put('/api/heroes/:id', (schema, request) => {\r\n        const id = request.params.id;\r\n        const attrs = JSON.parse(request.requestBody) as Hero;\r\n        const hero = schema.find(heroCollection, id);\r\n        hero?.update(attrs);\r\n        return hero || {};\r\n      });\r\n\r\n      // powers\r\n      this.get('/api/powers', (schema) => {\r\n        return schema.all(powerCollection).models;\r\n      });\r\n    },\r\n  });\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './core';\nimport { configureStore } from './core/configure-store';\nimport './index.scss';\nimport { makeServer } from './server/index';\nimport * as serviceWorker from './serviceWorker';\n\nmakeServer();\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, IModuleStore } from 'redux-dynamic-modules';\r\nimport { getSagaExtension } from 'redux-dynamic-modules-saga';\r\n\r\nexport function configureStore(): IModuleStore<any> {\r\n  return createStore({\r\n    extensions: [getSagaExtension()],\r\n  });\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/github.69494fdd.svg\";"],"sourceRoot":""}